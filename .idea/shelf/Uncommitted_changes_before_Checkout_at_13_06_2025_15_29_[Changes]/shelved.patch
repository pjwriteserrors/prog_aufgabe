Index: src/datastructures/ExtendedLinkedList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package datastructures;\r\n\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.NoSuchElementException;\r\nimport interfaces.Callable;\r\n\r\npublic class ExtendedLinkedList implements Iterable {\r\n\r\n\r\n\tprivate class ListElement {\r\n\t\tprivate Integer  data;\r\n\t\tprivate ListElement next;\r\n\r\n\t\tpublic ListElement(Integer data, ListElement next) {\r\n\t\t\tthis.data = data;\r\n\t\t\tthis.next = next;\r\n\t\t}\r\n\r\n\t\tpublic ListElement(Integer data) {\r\n\t\t\tthis(data,null);\r\n\t\t}\r\n\r\n\t\t//getters and setters\r\n\t\tpublic Integer getData() {\r\n\t\t\treturn this.data;\r\n\t\t}\r\n\r\n\t\tpublic void setData(Integer data) {\r\n\t\t\tthis.data = data;\r\n\t\t}\r\n\r\n\t\tpublic ListElement getNext() {\r\n\t\t\treturn this.next;\r\n\t\t}\r\n\r\n\t\tpublic void setNext(ListElement next) {\r\n\t\t\tthis.next = next;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate class LListIterator implements Iterator<Integer> {\r\n\t\tExtendedLinkedList.ListElement current;\r\n\r\n\r\n\t\tpublic LListIterator (ExtendedLinkedList l) {\r\n\t\t\tthis.current = l.getHead();\r\n\t\t}\r\n\r\n\t\tpublic boolean hasNext() {\r\n\t\t\treturn this.current != null;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Integer next() {\r\n\t\t\tif (!this.hasNext()) {\r\n\t\t\t\tthrow new NoSuchElementException();\r\n\t\t\t}\r\n\t\t\tInteger data = this.current.getData();\r\n\t\t\tthis.current=this.current.getNext();\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void remove() {\r\n\t\t\tthrow new UnsupportedOperationException();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tprivate ListElement head;\r\n\tprivate  int size;\r\n\r\n\tpublic ExtendedLinkedList() {\r\n\t\tthis.head = null;\r\n\t\tthis.size = 0;\r\n\t}\r\n\r\n\tpublic ExtendedLinkedList(Integer data) {\r\n\t\tthis();\r\n\t\tthis.addFirst(data);\r\n\t}\r\n\r\n\tpublic ListElement getHead() {return this.head;}\r\n\tpublic int getSize() {return this.size;}\r\n\tpublic boolean isEmpty() {return this.getSize() == 0;}\r\n\r\n\tpublic void addFirst(Integer data) {\r\n\t\tthis.head = new ListElement(data, this.head);\r\n\t\tthis.size++;\r\n\t}\r\n\r\n\tpublic void addLast(Integer data) {\r\n\t\tListElement e = new ListElement(data);\r\n\r\n\t\tthis.size++;\r\n\r\n\t\t// handle special case of an empty list\r\n\t\tif (this.head == null) {\r\n\t\t\tthis.head = e;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\t//iterate until we find last element\r\n\t\tListElement curr = this.head;\r\n\r\n\t\twhile(curr.getNext() != null) {\r\n\r\n\t\t\tcurr=curr.getNext();\r\n\t\t}\r\n\r\n\t\tcurr.setNext(e);\r\n\r\n\r\n\t}\r\n\r\n\r\n\tpublic Integer get(final int i) {\r\n\t\tif (i > this.getSize()) {\r\n\t\t\tthrow new IndexOutOfBoundsException(\"List index\" +  i +\" is out of bounds.\");\r\n\t\t}\r\n\r\n\t\tint j =i;\r\n\t\tListElement curr=this.head;\r\n\t\twhile ((curr) != null && (j> 0)) {\r\n\t\t\tcurr = curr.getNext();\r\n\t\t\tj--;\r\n\t\t}\r\n\r\n\t\treturn curr.getData();\r\n\r\n\t}\r\n\r\n\r\n\r\n\tpublic Integer removeFirst() {\r\n\t\tif (this.head == null) {\r\n\t\t\tthrow new NoSuchElementException(\"List is Empty!\");\r\n\t\t}\r\n\t\tInteger data = this.head.getData();\r\n\r\n\r\n\t\tthis.head = this.head.getNext();\r\n\t\tthis.size--;\r\n\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tpublic Integer removeLast() {\r\n\t\tif (this.head == null) {\r\n\t\t\tthrow new NoSuchElementException(\"List is Empty!\");\r\n\t\t}\r\n\r\n\t\t// check if list of size 1, if so use removeFirst\r\n\t\tif (this.size == 1) {\r\n\t\t\treturn this.removeFirst();\r\n\t\t}\r\n\r\n\t\tListElement curr = this.head;\r\n\r\n\t\twhile (curr.getNext().getNext() != null) {\r\n\t\t\tcurr = curr.getNext();\r\n\t\t}\r\n\r\n\r\n\t\tInteger data = curr.getNext().getData();\r\n\r\n\t\tcurr.setNext(null);\r\n\t\tthis.size--;\r\n\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tpublic void clearFirstN(int n) {\r\n\r\n\t\tif (this.size < n) {\r\n\t\t\tthis.size = 0;\r\n\t\t\tthis.head = null;\r\n\t\t}\r\n\r\n\t\t// clear the first n-elements\r\n\t\tfor (int i = 0; i<n && this.head != null ;i++) {\r\n\t\t\tthis.removeFirst();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic ExtendedLinkedList getSubList(int i, int j) {\r\n\t\tExtendedLinkedList output = new ExtendedLinkedList();\r\n\r\n\t\tif ((i < 0) || (j < 0)) {\r\n\t\t\tthrow new IndexOutOfBoundsException();\r\n\t\t}\r\n\r\n\t\tif (i > j) {\r\n\t\t\tthrow new UnsupportedOperationException(\"getSubList requires that i <= j\");\r\n\t\t}\r\n\r\n\t\tint  newSize = j - i;\r\n\r\n\t\t// check if result would be the empty list\r\n\t\tif ((newSize <= 0) || (this.size < j)) {\r\n\t\t\tSystem.out.println(\"newSize \" + newSize + \"this size :\" + this.size);\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\t\tListElement curr = this.head;\r\n\t\tfor (int currIndex = 0; currIndex < this.size;currIndex++) {\r\n\t\t\tif ((currIndex >= i) && (currIndex < j) ) {\r\n\t\t\t\toutput.addLast(curr.getData());\r\n\t\t\t}\r\n\t\t\tcurr = curr.getNext();\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tStringBuilder  sb = new StringBuilder();\r\n\r\n\t\tIterator<Integer> it = this.iterator();\r\n\r\n\t\twhile (it.hasNext()) {\r\n\t\t\tvar e = it.next();\r\n\t\t\tsb.append(e.toString());\r\n\r\n\t\t\tif (it.hasNext()) {\r\n\t\t\t\tsb.append(\", \");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn sb.toString();\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic Iterator<Integer> iterator() {\r\n\t\treturn new LListIterator(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * addI(Integer data, int i): adds data into list at position i\r\n\t */\r\n\tpublic void addI(Integer data, int i) {\r\n\t\t// error handling\r\n\t\t// throw if index is out of bounds\r\n\t\tif (i > this.getSize()) {\r\n\t\t\tthrow new IndexOutOfBoundsException(\"List index\" +  i +\" is out of bounds.\");\r\n\t\t}\r\n\r\n\t\t// set first element when index = 0\r\n\t\tif (i == 0) {\r\n\t\t\taddFirst(data);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// make new list element\r\n\t\tListElement e = new ListElement(data);\r\n\r\n\t\t// find element for position i-1\r\n\t\t// (because we can only do setNext())\r\n\t\tListElement curr = this.head;\r\n\t\tfor (int j = 0; j < i-1; j++) {\r\n\t\t\tcurr = curr.getNext();\r\n\t\t}\r\n\r\n\t\t// set element\r\n\t\te.setNext(curr.getNext());\r\n\t\tcurr.setNext(e);\r\n\r\n\t\t// increase size of list\r\n\t\tthis.size++;\r\n\t}\r\n\r\n    /**\r\n\t * removeI(int i): removes element from position i\r\n\t */\r\n\tpublic void removeI(int i) {\r\n        // TODO: implement this method\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * combineLists(list2): appends list2 to this list\r\n\t */\r\n\tpublic void combineLists(ExtendedLinkedList list2) {\r\n        // TODO: implement this method\r\n\t}\r\n\r\n    /**\r\n\t * This function returns, whether the list is sorted or not.\r\n     *\r\n     * @return whether the list is sorted or not\r\n\t */\r\n\tpublic boolean isSorted() {\r\n        // TODO: implement this method\r\n        return false;\r\n\t}\r\n\r\n\t/**\r\n\t * addSorted(Integer data): given list is already sorted. data has to\r\n\t * be added to the list but at the correct position so that list is at the end also sorted\r\n     * @throws UnsupportedOperationException if the list is not sorted.\r\n\t */\r\n\tpublic void addSorted(Integer data) throws UnsupportedOperationException {\r\n        // TODO: implement this method\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * filterElements(): outputs all even elements in the list, where\r\n\t * the function func evaluates to true.\r\n\t *\r\n\t * @return outputs a new list containing only the filtered elements\r\n\t */\r\n\tpublic ExtendedLinkedList filterElements(Callable<Boolean, Integer> func) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * evenElements(): outputs all even elements in list\r\n\t *\r\n\t * @return outputs all even elements in list\r\n\t */\r\n\tpublic ExtendedLinkedList evenElements() {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * oddElements(): outputs all odd elements in list (pay attention to negative elements)\r\n\t *\r\n\t *\r\n\t * @return outputs all odd elements in list\r\n\t */\r\n\tpublic ExtendedLinkedList oddElements() {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * positiveElements(): outputs all positive elements >0 in list\r\n\t *\r\n\t *\r\n\t * @return outputs all positive elements in list\r\n\t */\r\n\tpublic ExtendedLinkedList positiveElements() {\r\n\t\t// TODO: implement this method\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * negativeElements(): outputs all negative elements <0 in list\r\n\t *\r\n\t *\r\n\t * @return outputs all negative elements in list\r\n\t */\r\n\tpublic ExtendedLinkedList negativeElements() {\r\n\t\t// TODO: implement this method\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * rotation(int i, String direction): rotates all elements by i to the direction (right or left)\r\n\t * example: rotation(2): [1, 2, 3, 4] â†’ [3, 4, 1, 2]\r\n\t * i>size is also possible.\r\n\t *\r\n\t */\r\n\tpublic void rotation(int i, String direction) throws UnsupportedOperationException {\r\n\t\t// TODO: implement this method\r\n\t}\r\n\r\n\t/**\r\n\t * removeDuplicates(): removes all duplicates of list\r\n     * The first occurence is kept.\r\n\t *\r\n\t */\r\n\tpublic void removeDuplicates() {\r\n\t\t// TODO: implement this method\r\n\t}\r\n\r\n    public ExtendedLinkedList map(Callable<Integer, Integer> m) {\r\n        return null;\r\n        // TODO: implement this method\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/datastructures/ExtendedLinkedList.java b/src/datastructures/ExtendedLinkedList.java
--- a/src/datastructures/ExtendedLinkedList.java	(revision 99643e60212cf35856987dfaaab4993ad2b03d3a)
+++ b/src/datastructures/ExtendedLinkedList.java	(date 1749821176086)
@@ -1,7 +1,6 @@
 package datastructures;
 
 import java.util.Iterator;
-import java.util.List;
 import java.util.NoSuchElementException;
 import interfaces.Callable;
 
@@ -248,41 +247,17 @@
 	 * addI(Integer data, int i): adds data into list at position i
 	 */
 	public void addI(Integer data, int i) {
-		// error handling
-		// throw if index is out of bounds
-		if (i > this.getSize()) {
-			throw new IndexOutOfBoundsException("List index" +  i +" is out of bounds.");
-		}
-
-		// set first element when index = 0
-		if (i == 0) {
-			addFirst(data);
-			return;
-		}
-
-		// make new list element
-		ListElement e = new ListElement(data);
-
-		// find element for position i-1
-		// (because we can only do setNext())
-		ListElement curr = this.head;
-		for (int j = 0; j < i-1; j++) {
-			curr = curr.getNext();
-		}
-
-		// set element
-		e.setNext(curr.getNext());
-		curr.setNext(e);
-
-		// increase size of list
-		this.size++;
+        // TODO: implement this method
 	}
 
     /**
 	 * removeI(int i): removes element from position i
 	 */
 	public void removeI(int i) {
-        // TODO: implement this method
+        if(i < 0 || i > this.size) {
+			throw new IndexOutOfBoundsException("list index" +  i +" is out of bounds.");
+		}
+
 	}
 
 
